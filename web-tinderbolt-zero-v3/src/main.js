const {HtmlTelegramBot, userInfoToString} = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {

    constructor(token) {
        super(token);
        this.mode = null;
        this.list = [];
        this.user = {};
        this.count = 0;
    }

    async start(msg) {
        this.mode = "main";
        const text = this.loadMessage("main");
        await this.sendImage("main");
        await this.sendText(text);

        await this.showMainMenu({
            "start": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
            "profile": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
            "opener": "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
            "message": "–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
            "date": "–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
            "gpt": "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
            "html": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HTML"
        });
    }

    async html(msg) {
        await this.sendHTML(`<h3 style='color: #1558b0'> –ü—Ä–∏–≤–µ—Ç! </h3>`);
        const html = this.loadHtml("main");
        await this.sendHTML(html, {theme: "dark"});
    }

    async gpt(msg) {
        this.mode = "gpt";
        await this.sendImage("gpt");
        const text = this.loadMessage("gpt");
        await this.sendText("–ü–æ–æ–±—â–∞–µ–º—Å—è —Å –ò–ò");
    }

    async date(msg){
        this.mode = "date";
        await this.sendImage("date");
        const text = this.loadMessage("date");
        await this.sendTextButtons(text, {
            "date_grande":"–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
            "date_robbie":"–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya":"–ó–µ–Ω–¥–µ—è",
            "date_gosling":"–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy":"–¢–º–æ –•–∞—Ä–¥–∏",
        });
    }

    async dateButton(callbackQuery){
        const query = callbackQuery.data;
        await this.sendImage(query);
        const prompt = this.loadPrompt(query);
        chatGPT.setPrompt(prompt);
    }

    async dateDialogue(msg){
        const text = msg.text;
        const myMessage = await this.sendText("–ü–µ—á–∞—Ç–∞–µ—Ç...");
        const answer = await chatGPT.addMessage(text);
        await this.editText(myMessage,answer);
    }

    async message(msg){
        this.mode = "message";
        const text = this.loadMessage("message");
        await this.sendImage("message");

        await this.sendTextButtons(text,{
            "message_next":"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date":"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
        });

        this.list = [];
    }

    async messageButton(callbackQuery){
        const query = callbackQuery.data;
        const prompt = this.loadPrompt(query);
        const userChatHistory = this.list.join("\n\n")
        const myMessage = await this.sendText("ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–º...");

        const answer = await chatGPT.sendQuestion(prompt, userChatHistory);
        await this.editText(myMessage, answer);
    }

    async messageDialogue(msg){
        const text = msg.text;
        this.list.push(text);
    }

    async profile(msg){
        this.mode = "profile";
        await this.sendImage("profile");
        const text = this.loadMessage("profile");
        await this.sendText(text);
        this.user = {};
        this.count = 0;
        await this.sendText("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
    }

    async profileDialogue(msg){
        const text = msg.text;
        this.count++;

        switch (this.count) {
            case 1:
                this.user["age"] = text;
                await this.sendText("–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?");
                break;
            case 2:
                this.user["occupation"] = text;
                await this.sendText("–£ –í–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?");
                break;
            case 3:
                this.user["hobby"] = text;
                await this.sendText("–ß—Ç–æ –í–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?");
                break;
            case 4:
                this.user["annoys"] = text;
                await this.sendText("–¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
                break;
            case 5:
                this.user["goals"] = text;
                const prompt = this.loadPrompt("profile");
                const info = userInfoToString(this.user);
                const myMessage = await this.sendText("ChatGPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
                const answer = await chatGPT.sendQuestion(prompt, info);
                await this.editText(myMessage, answer);
                break;
            default:
                break;
        }


    }


    async gptDialogue(msg) {
        const text = msg.text;
        const myMessage = await this.sendText("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω–æ ChatGPT...");
        const answer = await chatGPT.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ - ", `${text}`);
        await this.editText(myMessage,answer);
    }

    async opener(msg){
        this.mode = "opener";

        const text = this.loadMessage("opener");
        await this.sendImage("opener");
        await this.sendText(text);

        this.user = {};
        this.count = 0;

        await this.sendText("–ò–º—è –¥–µ–≤—É—à–∫–∏");
    }

    async openerDialogue(msg){
        const text = msg.text;
        this.count++;

        switch (this.count) {
            case 1:
                this.user["name"] = text;
                await this.sendText("–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?");
                break;
            case 2:
                this.user["age"] = text;
                await this.sendText("–û—Ü–µ–Ω–∏—Ç–µ –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å: 1-10 –±–∞–ª–ª–æ–≤.");
                break;
            case 3:
                this.user["handsome"] = text;
                await this.sendText("–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç ?");
                break;
            case 4:
                this.user["occupation"] = text;
                await this.sendText("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞");
                break;
            case 5:
                this.user["goals"] = text;
                const prompt = this.loadPrompt("opener");
                const info = userInfoToString(this.user);

                const myMessage = await this.sendText("ChatGPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–º...")
                const answer = await chatGPT.sendQuestion(prompt, info);

                await this.editText(myMessage, answer);
                break;
            default:
                break;
        }
    }

    async hello(msg) {

        if (this.mode === "gpt") {
            await this.gptDialogue(msg);
        }
        else if(this.mode === "date"){
            await this.dateDialogue(msg);
        }
        else if(this.mode === "message"){
            await this.messageDialogue(msg);
        }
        else if(this.mode === "profile"){
            await this.profileDialogue(msg);
        }
        else if(this.mode === "opener"){
            await this.openerDialogue(msg);
        }
        else {
            const text = msg.text;
            await this.sendText("<b>–ü—Ä–∏–≤–µ—Ç!</b>");
            await this.sendText("<i>–ö–∞–∫ –¥–µ–ª–∞?</i>");
            await this.sendText(`–í—ã –ø–∏—Å–∞–ª–∏: ${text}`);

            await this.sendImage("avatar_main");

            await this.sendTextButtons("–ö–∞–∫–∞—è —É –í–∞—Å —Ç–µ–º–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º?", {
                "theme_light": "–°–≤–µ—Ç–ª–∞—è",
                "theme_dark": "–¢—ë–º–Ω–∞—è",
            });
        }
    }

    async helloButton(callbackQuery) {
        const query = callbackQuery.data;
        if (query === "theme_light") {
            await this.sendText("–£ –í–∞—Å —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞.");
        } else if (query === "theme_dark") {
            await this.sendText("–£ –í–∞—Å —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞.");
        }
    }
}


const bot = new MyTelegramBot("7466348561:AAGRHKQx8dvNRA6wwJF6AyJ_dOtAsxnnYy8");
const chatGPT = new ChatGptService("gpt:pPdqYamDV0iFkELNg02NJFkblB3Tx2WqHlm0PwDlB9pl0he8");


bot.onCommand(/\/start/, bot.start);
bot.onCommand(/\/html/, bot.html);
bot.onCommand(/\/gpt/, bot.gpt);
bot.onCommand(/\/date/, bot.date);
bot.onCommand(/\/message/, bot.message);
bot.onCommand(/\/profile/, bot.profile);
bot.onCommand(/\/opener/, bot.opener);

bot.onTextMessage(bot.hello);

bot.onButtonCallback(/^date_.*/, bot.dateButton);
bot.onButtonCallback(/^message_.*/, bot.messageButton);
bot.onButtonCallback(/^.*/, bot.helloButton);